package com.example.amd;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.content.Intent;
import android.widget.Toast;
import android.os.Bundle;
import android.view.View;
import android.widget.EditText;

import java.util.ArrayList;
import java.util.List;

public class BancoDados extends SQLiteOpenHelper {

    private static final int VERSAO_BANCO = 2;
    private static final String BANCO_CLIENTE = "bd_clientes";

    /*###### CLIENTE ###########*/
    private static final String TABELA_CLIENTE = "tb_clientes";

    private static final String COLUNA_CODIGO = "codigo";
    private static final String COLUNA_NOME = "nome";
    private static final String COLUNA_TELEFONE = "telefone";
    private static final String COLUNA_EMAIL = "email";
    private static final String COLUNA_CARTAO = "cartao";

    /*###### MEDICO ###########*/
    private static final String TABELA_MEDICO = "tb_medicos";

    private static final String COLUNA_CODIGOM = "codigoo";
    private static final String COLUNA_NOMEM = "nomee";
    private static final String COLUNA_TELEFONEM = "telefonee";
    private static final String COLUNA_EMAILM = "emaill";
    private static final String COLUNA_ENDEREÇOM = "endereço";
    private static final String COLUNA_ESPECIALIDADE = "especialidade";


    public BancoDados(Context context){
        super(context, BANCO_CLIENTE, null, VERSAO_BANCO);
    }
    public void onCreate(SQLiteDatabase db) {

        String QUERY_COLUNA = "CREATE TABLE " + TABELA_CLIENTE + "("
                + COLUNA_CODIGO + " INTEGER PRIMARY KEY, "
                + COLUNA_NOME + " TEXT,"
                + COLUNA_TELEFONE + " TEXT,"
                + COLUNA_EMAIL + " TEXT,"
                + COLUNA_CARTAO + " TEXT)";


        db.execSQL(QUERY_COLUNA);

        String QUERY_COLUNAA = "CREATE TABLE " + TABELA_MEDICO + "("
                + COLUNA_CODIGOM + " INTEGER PRIMARY KEY, "
                + COLUNA_NOMEM + " TEXT,"
                + COLUNA_TELEFONEM + " TEXT,"
                + COLUNA_EMAILM + " TEXT,"
                + COLUNA_ENDEREÇOM + " TEXT,"
                +COLUNA_ESPECIALIDADE + " TEXT)";

        db.execSQL(QUERY_COLUNAA);
    }
    public void onUpgrade(SQLiteDatabase db, int i, int i1) {


    }

    /*##########CLIENTE##################*/
    void addCliente(Cliente cliente){
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(COLUNA_NOME,cliente.getNome());
        values.put(COLUNA_TELEFONE, cliente.getTelefone());
        values.put(COLUNA_EMAIL, cliente.getEmail());
        values.put(COLUNA_CARTAO,cliente.getCartao());

        db.insert(TABELA_CLIENTE,null, values);
        db.close();
    }

    void apagarCliente(Cliente cliente){
        SQLiteDatabase db = this.getWritableDatabase();

        db.delete(TABELA_CLIENTE, COLUNA_CODIGO + " = ?", new String[] { String.valueOf(cliente.getCodigo())});
        db.close();
    }

    Cliente selecionarCliente(int codigo){
        SQLiteDatabase db = this.getReadableDatabase();

        Cursor cursor = db.query(TABELA_CLIENTE, new String[]{COLUNA_CODIGO, COLUNA_NOME,
                        COLUNA_TELEFONE, COLUNA_EMAIL, COLUNA_CARTAO},COLUNA_CODIGO + " = ?",
                new String[]{String.valueOf(codigo)},null,null,null,null);

        if (cursor!= null){
            cursor.moveToFirst();
        }

        Cliente cliente = new Cliente(Integer.parseInt(cursor.getString(0)),
                cursor.getString(1),
                cursor.getString(2),
                cursor.getString(3),
                cursor.getString(4));

        return cliente;


    }

    void atualizaCliente(Cliente cliente){
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(COLUNA_NOME,cliente.getNome());
        values.put(COLUNA_TELEFONE, cliente.getTelefone());
        values.put(COLUNA_EMAIL, cliente.getEmail());
        values.put(COLUNA_CARTAO,cliente.getCartao());

        db.update(TABELA_CLIENTE, values, COLUNA_CODIGO + " = ?",
                new String[]{String.valueOf(cliente.getCodigo())});

    }

    public List<Cliente> listaTodoscontatosClientes(){
        List<Cliente> listaClientes = new ArrayList<Cliente>();

        String query = "SELECT * FROM " + TABELA_CLIENTE;

        SQLiteDatabase db = this.getWritableDatabase();
        Cursor c = db.rawQuery(query, null);

        if (c.moveToFirst()){
            do{
                Cliente cliente = new Cliente();
                cliente.setCodigo(Integer.parseInt(c.getString(0)));
                cliente.setNome(c.getString(1));
                cliente.setTelefone(c.getString(2));
                cliente.setEmail(c.getString(3));
                cliente.setCartao(c.getString(4));

                listaClientes.add(cliente);


            }while (c.moveToNext());

        }

        return listaClientes;
    }


    /*####### MEDICO #################*/
    void addMedico(Medico medico){
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(COLUNA_NOMEM,medico.getNomee());
        values.put(COLUNA_TELEFONEM, medico.getTelefonee());
        values.put(COLUNA_EMAILM, medico.getEmaill());
        values.put(COLUNA_ENDEREÇOM, medico.getEndereço());
        values.put(COLUNA_ESPECIALIDADE,medico.getEspecialidade());

        db.insert(TABELA_MEDICO,null, values);
        db.close();

    }

    void apagarMedico(Medico medico){
        SQLiteDatabase db = this.getWritableDatabase();

        db.delete(TABELA_MEDICO, COLUNA_CODIGOM + " = ?", new String[] { String.valueOf(medico.getCodigoo())});
        db.close();
    }

    Medico selecionarMedico(int codigoo){
        SQLiteDatabase db = this.getReadableDatabase();

        Cursor cursorr = db.query(TABELA_MEDICO, new String[]{COLUNA_CODIGOM, COLUNA_NOMEM,
                        COLUNA_TELEFONEM, COLUNA_EMAILM, COLUNA_ENDEREÇOM,COLUNA_ESPECIALIDADE},COLUNA_CODIGOM + " = ?",

                new String[]{String.valueOf(codigoo)},null,null,null,null);


        if (cursorr!= null){
            cursorr.moveToFirst();
        }

        Medico medico = new Medico(Integer.parseInt(cursorr.getString(0)),
                cursorr.getString(1), cursorr.getString(2),
                cursorr.getString(3),cursorr.getString(4),
                cursorr.getString(5));
        return medico;


    }

    void atualizaMedico(Medico medico){
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(COLUNA_NOMEM,medico.getNomee());
        values.put(COLUNA_TELEFONEM, medico.getTelefonee());
        values.put(COLUNA_EMAILM, medico.getEmaill());
        values.put(COLUNA_ENDEREÇOM, medico.getEndereço());
        values.put(COLUNA_ESPECIALIDADE,medico.getEspecialidade());

        db.update(TABELA_MEDICO, values, COLUNA_CODIGOM + " = ?",
                new String[]{String.valueOf(medico.getCodigoo())});

    }

    public List<Medico> listaTodoscontatosMedicos(){
        List<Medico> listaMedicos = new ArrayList<Medico>();

        String query = "SELECT * FROM " + TABELA_MEDICO;

        SQLiteDatabase db = this.getWritableDatabase();
        Cursor d = db.rawQuery(query, null);

        if (d.moveToFirst()){
            do{
                Medico medico = new Medico();
                medico.setCodigoo(Integer.parseInt(d.getString(0)));
                medico.setNomee(d.getString(1));
                medico.setTelefonee(d.getString(2));
                medico.setEmaill(d.getString(3));
                medico.setEndereço(d.getString(4));
                medico.setEspecialidade(d.getString(5));

                listaMedicos.add(medico);


            }while (d.moveToNext());

        }

        return listaMedicos;
    }



    }

